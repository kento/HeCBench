#===============================================================================
# User Options
#===============================================================================

# Compiler can be set below, or via environment variable
CC        = nvcc
OPTIMIZE  = yes
DEBUG     = no
ARCH      = sm_90
LAUNCHER = bash -c

#===============================================================================
# Program name & source code list
#===============================================================================

program = main

source = main.cu dslash.cu kernels.cu

obj = $(source:.cu=.o)

#===============================================================================
# Sets Flags
#===============================================================================

# Standard Flags
# Double precision the grid size is 32^4 
CFLAGS := $(EXTRA_CFLAGS) -std=c++14           -DMILC_COMPLEX           -DLDIM=32           -DPRECISION=1           -Xcompiler -Wall           -arch=$(ARCH)           -Xcompiler -fopenmp           -I../include

# Linker Flags
LDFLAGS = 

# Debug Flags
ifeq ($(DEBUG),yes)
  CFLAGS += -g -DDEBUG
  LDFLAGS  += -g
endif


# Optimization Flags
ifeq ($(OPTIMIZE),yes)
  CFLAGS += -O3 -use_fast_math
endif

#===============================================================================
# Targets to Build
#===============================================================================

$(program): $(obj)
	$(CC) $(CFLAGS) $(obj) -o $@ $(LDFLAGS)

%.o: %.cu dslash.h
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -rf $(program) $(obj)

include ../include/dslash-NVIDIA

run: $(program)
	$(LAUNCHER) "$(COMMAND)"

run_mem: $(program)
	nvidia-smi --query-gpu=memory.used,memory.total --format=csv --loop-ms=1 > log.mem &
	$(LAUNCHER) "$(COMMAND)"
	pkill nvidia-smi
	../scripts/m.sh


